<?php

/**
 * @file
 *
 * This module add versioning information to projects checked out of git.
 */

/**
 * Implement hook_system_info_alter() to provide metadata to drupal from git.
 *
 * We support populating $info['version'] and $info['project'].
 *
 * @param $info
 *   The module/theme info array we're altering.
 * @param $file
 *   An object describing the filesystem location of the module/theme.
 * @param $type
 *   Can be module or theme.
 */
function git_deploy_system_info_alter(&$info, $file, $type = NULL) {
  if (empty($info['version'])) {
    $directory = dirname($file->uri);
    // Check whether this belongs to core. Speed optimization.
    if (substr($directory, 0, strlen($type)) != $type) {
      // Check stand alone repo approach.
      if (git_deploy_fetch_git_repo_info($info, $file, $type, $directory)) {
        return;
      }
      module_load_include('inc', 'update', 'update.fetch');
      // Check subtree repo approach.
      if (git_deploy_fetch_subtree_info($info, $file, $type, $directory)) {
        return;
      }
    }
  }
}

/**
 * Attempts to fetch version info when stand alone repo approach is used.
 *
 * @return bool
 *   Returns TRUE if the info could be fetched.
 */
function git_deploy_fetch_git_repo_info(&$info, $file, $type, $directory) {
  while ($directory && !file_exists("$directory/.git")) {
    $directory = substr($directory, 0,  strrpos($directory, '/'));
  }
  $git_dir = "$directory/.git";
  // Theoretically /.git could exist.
  if ($directory && file_exists($git_dir)) {
    $git = variable_get('git_deploy_executable', 'git') . ' --git-dir ' . $git_dir;
    // Find first the project name based on fetch URL.
    // Eat error messages. >& is valid on Windows, too. Also, $output does
    // not need initialization because it's taken by reference.
    exec("$git remote show -n origin 2>&1", $output);
    if ($fetch_url = preg_grep('/^\s*Fetch URL:/', $output)) {
      $fetch_url = current($fetch_url);
      $project_name = substr($fetch_url, strrpos($fetch_url, '/') + 1);
      if (substr($project_name, -4) == '.git') {
        $project_name = substr($project_name, 0, -4);
      }
      $info['project'] = $project_name;
    }
    // Try to fill in branch and tag.
    exec("$git rev-parse --abbrev-ref HEAD 2>&1", $branch);
    $tag_found = FALSE;
    if ($branch) {
      $branch = $branch[0];
      // Any Drupal-formatted branch.
      $branch_preg = '\d+\.x-\d+\.';
      if (preg_match('/^' . $branch_preg . 'x$/', $branch)) {
        $info['version'] = $branch . '-dev';
        // Nail down the core and the major version now that we know
        // what they are.
        $branch_preg = preg_quote(substr($branch, 0, -1));
      }
      // Now try to find a tag.
      exec("$git rev-list --topo-order --max-count=1 HEAD 2>&1", $last_tag_hash);
      if ($last_tag_hash) {
        exec("$git describe  --tags $last_tag_hash[0] 2>&1", $last_tag);
        if ($last_tag) {
          $last_tag = $last_tag[0];
          // Make sure the tag starts as Drupal formatted (for eg.
          // 7.x-1.0-alpha1) and if we are on a proper branch (ie. not
          // master) then it's on that branch.
          if (preg_match('/^(' . $branch_preg . '\d+(?:-[^-]+)?)(-(\d+-)g[0-9a-f]{7})?$/', $last_tag, $matches)) {
            $tag_found = TRUE;
            $info['version'] = isset($matches[2]) ? $matches[1] . '.' . $matches[3] . 'dev' : $last_tag;
          }
        }
      }
    }
    if (!$tag_found) {
      $last_tag = '';
    }
    // The git log -1 command always succeeds and if we are not on a
    // tag this will happen to return the time of the last commit which
    // is exactly what we wanted.
    exec("$git log -1 --pretty=format:%at $last_tag 2>&1", $datestamp);
    if ($datestamp && is_numeric($datestamp[0])) {
      $info['datestamp'] = $datestamp[0];
    }
  }
}


function git_deploy_get_git_remotes($directory, $reset = FALSE) {
  static $cache;
  if ($reset || !isset($cache[$directory])) {
    $cache[$directory] = array();
    $git = variable_get('git_deploy_executable', 'git') . ' --git-dir=' . escapeshellarg($directory);
    $command = $git . ' remote -v';
    exec($command, $output);
    if ($output) {
      foreach ($output as $repo_line) {
        $repo_line = strtr($repo_line, array(' (fetch)' => '', ' (push)' => ''));
        list($remote, $uri) = explode("\t", $repo_line);
        if (!isset($cache[$directory][$remote])) {
          $cache[$directory][$remote] = $uri;
        }
      }
    }
  }
  return $cache[$directory];
}

function git_deploy_get_git_branches($directory, $reset = FALSE) {
  static $cache;
  if ($reset || !isset($cache[$directory])) {
    $cache[$directory] = array();
    $git = variable_get('git_deploy_executable', 'git') . ' --git-dir=' . escapeshellarg($directory);
    $command = $git . ' branch -ra';
    exec($command, $output);
    if ($output) {
      foreach ($output as $branch) {
        $branch = trim($branch, " \t\n\r\0\x0B");
        if (!isset($branches[dirname($branch)])) {
          $cache[$directory][dirname($branch)] = array();
        }
        $cache[$directory][dirname($branch)][basename($branch)] = basename($branch);
      }
    }
  }
  return $cache[$directory];
}

/**
 * Fetch the matching tag for a commit.
 *
 * @param $commit string
 *   The SHA1 hash of the commit.
 * @param $directory
 *   The git directory.
 *
 * @return bool|string
 *   FALSE if no tag was found.
 */
function git_deploy_get_tag($commit, $directory) {
  $git = variable_get('git_deploy_executable', 'git') . ' --git-dir=' . escapeshellarg($directory);
  $command = $git . ' describe  --always --tags ' . $commit . ' 2>&1';
  exec($command, $tags);
  if ($tags) {
    foreach ($tags as $last_tag) {
      // Make sure the tag starts as Drupal formatted (for eg.
      // 7.x-1.0-alpha1) and if we are on a proper branch (ie. not
      // master) then it's on that branch.
      $branch_preg = '\d+\.x-\d+\.';
      if (preg_match('/^(' . $branch_preg . '\d+(?:-[^-]+)?)(-(\d+-)g[0-9a-f]{7})?$/', $last_tag, $matches)) {
        return isset($matches[2]) ? $matches[1] . '.' . $matches[3] . 'dev' : $last_tag;
      }
    }
  }
  return FALSE;
}

/**
 * Fetch the matching branch for a commit.
 *
 * @param $commit string
 *   The SHA1 hash of the commit.
 * @param $directory
 *   The git directory.
 * @param $remote string
 *   The remote to take in account.
 *
 * @return bool|string
 *   FALSE if no branch was found.
 */
function git_deploy_get_branch($commit, $directory, $remote = NULL) {
  $git = variable_get('git_deploy_executable', 'git') . ' --git-dir=' . escapeshellarg($directory);
  $command = $git . ' branch -ar --contains=' . escapeshellarg($commit);
  exec($command, $branches_with_commit);
  if ($branches_with_commit) {
    foreach ($branches_with_commit as $branch_with_commit) {
      // Check if the branch is actually the one with our remote.
      if (empty($remote) || stristr($branch_with_commit, $remote) !== FALSE) {
        $branch = ltrim(drupal_substr(trim($branch_with_commit), drupal_strlen($remote)), '/');
        // Make sure the branch starts is Drupal formatted.
        $branch_preg = '\d+\.x-\d+\.x';
        if (preg_match('/^' . $branch_preg . '$/', $branch)) {
          return $branch;
        }
      }
    }
  }
  return FALSE;
}

/**
 * Fetch the timestamp of a commit.
 *
 * @param $commit string
 *   The SHA1 hash of the commit.
 * @param $directory
 *   The git directory.
 *
 * @return bool|string
 *   FALSE if no datestamp was found.
 */
function git_deploy_get_datestamp($commit, $directory) {
  $git = variable_get('git_deploy_executable', 'git') . ' --git-dir=' . escapeshellarg($directory);
  // Based on the commit we can get the date.
  $command = $git . ' show --pretty=format:%at ' . $commit;
  exec($command, $datestamp);
  if ($datestamp && is_numeric($datestamp[0])) {
    return $datestamp[0];
  }
  return FALSE;
}

/**
 * Implements hook_flush_caches().
 */
function git_deploy_flush_caches() {
  return array('cache_git_deploy');
}

/**
 * Attempts to fetch version info when subtree approach is used.
 *
 * @return bool
 *   Returns TRUE if the info could be fetched.
 */
function git_deploy_fetch_subtree_info(&$info, $file, $type, $directory) {
  static $git_cache;
  static $project_info_cache;

  // This might takes quite some time - increase timelimit.
  set_time_limit(0);

  // Search in the git log to find subtrees.
  $git_dir = rtrim(variable_get('git_repo_root', DRUPAL_ROOT), '/') . '/.git';
  $git = variable_get('git_deploy_executable', 'git') . ' --git-dir=' . escapeshellarg($git_dir);
  $git_remotes = git_deploy_get_git_remotes($git_dir);

  if (empty($git_cache)) {
    $git_cache = array();
  }
  if (empty($project_info_cache)) {
    $project_info_cache = array();
  }

  // Iterate up the tree, this way we get info about submodules of modules.
  // And as we cache everything this shouldn't cause that much overhead.
  $subtree_directory = $directory;
  while (!empty($subtree_directory) && $subtree_directory != '.') {
    if (!isset($git_cache[$subtree_directory]) && $cache = cache_get('git_info:' . $subtree_directory, 'cache_git_deploy')) {
      $git_cache[$subtree_directory] = $cache->data;
    }
    if (!isset($git_cache[$subtree_directory])) {
      $git_cache[$subtree_directory] = array(
        'subtree_directory' => $subtree_directory,
      );
      $command = $git . ' log --grep=' . escapeshellarg('git-subtree-dir: .*\/' . preg_quote($subtree_directory)) . ' 2>&1';
      exec($command, $subtrees);
      if ($subtrees) {
        $subtrees_text = implode("\n", $subtrees);
        // Fetch the full directory information
        if (preg_match('/git-subtree-dir:\s*(.*)$/m', $subtrees_text, $matches)) {
          $git_cache[$subtree_directory]['dir'] = $matches[1];
          // Check if this is a known remote.
          // It's good practice to add a git remote named the same as the path
          // of each subtree.
          // For now we support drupal.org repos only.
          //if (isset($git_remotes[$matches[1]]) && strpos($git_remotes[$matches[1]], '.drupal.org') !== FALSE) {
          if (isset($git_remotes[$matches[1]])) {
            $git_cache[$subtree_directory]['remote'] = $matches[1];
            $git_cache[$subtree_directory]['remote_uri'] = $git_remotes[$matches[1]];
          }
        }

        // Fetch the commit hash of the subproject.
        if (preg_match('/git-subtree-split:\s*(.*)$/m', $subtrees_text, $matches)) {
          $git_cache[$subtree_directory]['commit'] = $matches[1];

          // Based on the commit we can get the date - if no squash was used.
          if ($datestamp = git_deploy_get_datestamp($matches[1], $git_dir)) {
            $git_cache[$subtree_directory]['datestamp'] = $datestamp;
          }
        }
      }
      cache_set('git_info:' . $subtree_directory, $git_cache[$subtree_directory], 'cache_git_deploy');
    }

    if (!isset($project_info_cache[$subtree_directory]) && $cache = cache_get('project_info:' . $subtree_directory, 'cache_git_deploy')) {
      $project_info_cache[$subtree_directory] = $cache->data;
      // Check how old the project infos are. If they are older than a day
      // unset the cache and trigger a re-fetch this way.
      if (empty($project_info_cache[$subtree_directory]['last_fetched']) || ($project_info_cache[$subtree_directory]['last_fetched'] - time()) / 3600 >= 24) {
        unset($project_info_cache[$subtree_directory]);
      }
    }
    if (!isset($project_info_cache[$subtree_directory])) {
      // At least set an empty array so that it's clear we processed this
      // project.
      $project_info_cache[$subtree_directory] = array();
      if (!empty($git_cache[$subtree_directory]['datestamp'])) {
        $project_info_cache[$subtree_directory]['datestamp'] = $git_cache[$subtree_directory]['datestamp'];
      }
      // If a subtree was found try to extract the version information.
      // Use remote to fetch information.
      if (isset($git_cache[$subtree_directory]['remote'])) {
        // Set project name.
        $project = substr($git_cache[$subtree_directory]['remote'], strrpos($git_cache[$subtree_directory]['remote'], '/') + 1);
        if (substr($project, -4) == '.git') {
          $project = substr($info['project'], 0, -4);
        }
        $project_info_cache[$subtree_directory]['project'] = $project;

        // Update remote - ensures we've the latest information. Operate in
        // quite mode - if authentication fails we simply step over this.
        // Unfortunately real "non-interactive" mode is just supported as of
        // git >2.3 - see https://github.com/blog/1957-git-2-3-has-been-released
        // To ensure SSH connections don't show password prompt set
        // SSH_ASKPASS before the command and use GIT_SSH_COMMAND to SSH
        // options.
        $silent_command = 'GIT_TERMINAL_PROMPT=0 SSH_ASKPASS=0 GIT_SSH_COMMAND="ssh -o PasswordAuthentication=no" ';
        //$command = $silent_command . $git . ' remote update --quiet ' . $git_cache[$subtree_directory]['remote'];
        $command = $silent_command . $git . ' fetch --quiet --tags ' . $git_cache[$subtree_directory]['remote'] . ' 2>&1';
        exec($command, $remote_update);

        if ($tag = git_deploy_get_tag($git_cache[$subtree_directory]['commit'], $git_dir)) {
          $project_info_cache[$subtree_directory]['version'] = $tag;
        }
        if (!$tag && $branch = git_deploy_get_branch($git_cache[$subtree_directory]['commit'], $git_dir, $git_cache[$subtree_directory]['remote'])) {
          $project_info_cache[$subtree_directory]['version'] = $branch . '-dev';
        }
      }
      else {
        // If no remote is given try to fetch info from d.o.
        // See if there's such a module on d.o. Use modified header to
        $options['headers'] = array(
          'If-Modified-Since' => date(DATE_COOKIE, time() + 3600),
        );
        $url = _update_get_fetch_url_base((array) $file);
        $url .= '/' . $file->name . '/' . DRUPAL_CORE_COMPATIBILITY;
        // Send request.
        $result = drupal_http_request($url, $options);
        if ($result->code == 200 && stripos($result->data, '<error>') === FALSE) {
          // Module exists. Try to fetch commit information from git web on
          // d.o.
          $project_info_cache[$subtree_directory]['project'] = $file->name;
          if (!empty($git_cache[$subtree_directory]['commit'])) {
            $git_web_result = drupal_http_request('http://cgit.drupalcode.org/' . $file->name . '/commit/?id=' . $git_cache[$subtree_directory]['commit']);
            if ($git_web_result->code == 200) {
              // Check for tag info
              if (preg_match('/<a[^\\>]*class=(?:\\\'|")tag-deco.*?\\>([^\\<]*)?\\</i', $git_web_result->data, $matches)) {
                // Version info.
                $project_info_cache[$subtree_directory]['version'] = $matches[1];
              }
              // Check for branch info
              elseif (preg_match('/<a[^\\>]*class=(?:\\\'|")branch-deco.*?\\>([^\\<]*)?\\</i', $git_web_result->data, $matches)) {
                // Version info.
                $project_info_cache[$subtree_directory]['version'] = $matches[1] . '-dev';
              }
            }
          }
        }
      }
      // Store the results of all the evaluation in the cache.
      $project_info_cache[$subtree_directory]['last_fetched'] = time();
      cache_set('project_info:' . $subtree_directory, $project_info_cache[$subtree_directory], 'cache_git_deploy');
    }
    if (!empty($project_info_cache[$subtree_directory]['datestamp'])) {
      $info['datestamp'] = $project_info_cache[$subtree_directory]['datestamp'];
    }
    if (!empty($project_info_cache[$subtree_directory]['project'])) {
      $info['project'] = $project_info_cache[$subtree_directory]['project'];
    }
    if (!empty($project_info_cache[$subtree_directory]['version'])) {
      $info['version'] = $project_info_cache[$subtree_directory]['version'];
      return TRUE;
    }
    $subtree_directory = dirname($subtree_directory);
  }
  return FALSE;
}

/**
 * Implements hook_cron_queue_info().
 */
function git_deploy_cron_queue_info() {
  $queues['git_deploy_update_version_info'] = array(
    'worker callback' => 'git_deploy_update_version_info_worker',
    'time' => 60,
  );
  return $queues;
}

/**
 * Implements hook_cron().
 */
function git_deploy_cron() {
  /** @var DrupalReliableQueueInterface $queue */
  $queue = DrupalQueue::get('git_deploy_update_version_info');
  // If there are no more items left update the list again. Also update the list
  // if the last updated was more than 24 hours ago.
  if (!$queue->numberOfItems() || (variable_get('git_repo_last_queue_refresh', 0) - time()) / 3600 >= 24) {
    $queue->deleteQueue();
    $queue = DrupalQueue::get('git_deploy_update_version_info');
    // Get all the modules.
    $modules = module_list();
    foreach ($modules as $module) {
      $queue->createItem($module);
    }
    variable_set('git_repo_last_queue_refresh', time());
  }
}

/**
 * Process scheduled version update.
 */
function git_deploy_update_version_info_worker($module_name) {
  // Re-use our hook to re-fill the cache.
  // Simulate invocation from _system_rebuild_module_data().
  $defaults = array(
    'dependencies' => array(),
    'description' => '',
    'package' => 'Other',
    'version' => NULL,
    'php' => DRUPAL_MINIMUM_PHP,
    'files' => array(),
    'bootstrap' => 0,
    'name' => $module_name,
  );
  $uri = drupal_get_path('module', $module_name) . '/' . $module_name . '.module';
  $module = (object) array(
    'name' => $module_name,
    'filename' => $uri,
    'uri' => $uri,
  );

  $info_file = dirname($module->uri) . '/' . $module->name . '.info';
  if (!file_exists($info_file)) {
    return TRUE;
  }
  // Look for the info file.
  $module->info = drupal_parse_info_file($info_file);
  $module->info['mtime'] = filemtime($info_file);

  // Merge in defaults and save.
  $module->info = $module->info + $defaults;

  git_deploy_system_info_alter($module->info, $module, 'module');
}
